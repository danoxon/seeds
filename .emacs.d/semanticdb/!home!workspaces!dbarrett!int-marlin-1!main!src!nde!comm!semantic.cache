;; Object comm/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "comm/"
  :tables
  (list
    (semanticdb-table "fcomm.h"
      :major-mode 'c-mode
      :tags nil
      :file "fcomm.h"
      :pointmax 97053
      :fsize 97052
      :lastmodtime '(20893 15403 5525 27000)
      :unmatched-syntax nil
      :lexical-table 
        '(("FCOMM_INCLUDED")
          ("FCOMM_REXMIT_WKP_VALUE" . ((number "200000" 4238 . 4244)))
          ("FCOMM_CHANNEL_CMD_BCAST" . ((number "4" 4893 . 4894)))
          ("FCOMM_CHANNEL_RESPONSE" . ((number "5" 4954 . 4955)))
          ("NODE_UNLOCK" (spp-arg-list ("x" "msr") 10845 . 10852) . 
              ((symbol "COMM_UNLOCK" 10857 . 10868) (semantic-list "(m_pNodeArr[(x)]->nodeLock,msr)" 10868 . 10899) (punctuation ";" 10899 . 10900) (IF "if" 10903 . 10905) (semantic-list "(m_enableSPAScheme && m_pNodeArr[(x)]->spuDist)" 10906 . 10953) (symbol "COMM_UNLOCK" 10960 . 10971) (semantic-list "(m_spaArr[m_pNodeArr[(x)]->spaIdx].spaLock,msr)" 10971 . 11018)))
          ("LINUX_NODE_UNLOCK" (spp-arg-list ("x") 11099 . 11102) . ((symbol "NODE_UNLOCK" 11103 . 11114) (semantic-list "((x),__dummy)" 11114 . 11127)))
          ("SUBCHANNEL_SHIFT" . ((number "9" 549 . 550)))
          ("MAX_NUM_RX_THREADS" . ((number "16" 939 . 941)))
          ("SEQ_ADD" (spp-arg-list ("a" "b") 3327 . 3332) . ((semantic-list "((uint16)((a)+(b)))" 3335 . 3354)))
          ("MAX_ACK_PKT_SIZE" . ((number "128" 3543 . 3546)))
          ("FCOMM_CHANNEL_UNICAST" . ((number "6" 5041 . 5042)))
          ("FCOMM_CHANNEL_ASYNC" . ((number "8" 5213 . 5214)))
          ("FCOMM_MSG_READY_EVENT" . ((number "0x1" 11437 . 11440)))
          ("HAVE_FCOMM" . ((number "1" 166 . 167)))
          ("CMD_BCAST_MAX_MSG_SIZE" . ((semantic-list "(512*1024)" 249 . 259)))
          ("CHANNEL_INDEX" (spp-arg-list ("x" "y") 725 . 730) . ((semantic-list "((x) | ((y) << SUBCHANNEL_SHIFT))" 731 . 764)))
          ("FCOMM_HOST_PORT" . ((symbol "FCOMM_BASE_PORT" 2724 . 2739)))
          ("FCOMM_STD_PKT_SIZE" . ((semantic-list "(1500+sizeof(ethernetFrame_t))" 5616 . 5646)))
          ("MAX_440GX_ETH_DRIV_BUF_SIZE" . ((number "4000" 6234 . 6238)))
          ("UNICAST_CHANNEL_MAX_MSG_SIZE" . ((semantic-list "(16*1024)" 493 . 502)))
          ("SUBCHANNEL" (spp-arg-list ("x") 783 . 786) . ((semantic-list "((x).chIdx >> SUBCHANNEL_SHIFT)" 787 . 818)))
          ("SYS_SOCKET_INCLUDED")
          ("SEQ_GT" (spp-arg-list ("a" "b") 3160 . 3165) . ((semantic-list "((int16)((a)-(b)) > 0)" 3170 . 3192)))
          ("NUM_ACK_PACKETS" . ((symbol "NUM_RX_THREADS" 3606 . 3620)))
          ("FCOMM_CHANNEL_MIRROR" . ((semantic-list "(FCOMM_FIRST_CHANNEL)" 4639 . 4660)))
          ("FCOMM_NUM_FIXED_CHANNELS" . ((number "11" 5368 . 5370)))
          ("DIV_ROUNDUP" (spp-arg-list ("x" "y") 6119 . 6124) . ((semantic-list "(((x)+(y)-1)/(y))" 6125 . 6142)))
          ("CHANNEL_UNLOCK" (spp-arg-list ("x" "msr") 11276 . 11283) . ((symbol "COMM_UNLOCK" 11284 . 11295) (semantic-list "((x)->channelLock,msr)" 11295 . 11317)))
          ("MIN_AVAIL_CNT_FOR_RAN" . ((number "3" 33906 . 33907)))
          ("RESP_CHANNEL_MAX_MSG_SIZE" . ((semantic-list "(16*1024)" 409 . 418)))
          ("FCOMM_MAX_PORT" . ((semantic-list "(FCOMM_BASE_PORT+15)" 2947 . 2967)))
          ("FCOMM_CHANNEL_COREFILE" . ((number "3" 4822 . 4823)))
          ("FCOMM_CHANNEL_TRANSIENT_FIRST" . ((semantic-list "(FCOMM_NUM_FIXED_CHANNELS)" 5445 . 5471)))
          ("FCOMM_DEFAULT_NUM_TRANS_CHANNELS" . ((number "100" 5545 . 5548)))
          ("MAX_SPA_ORIG_TO_LDR_BURST_SIZE" . ((number "24" 6891 . 6893)))
          ("GOT_SAW_CREDIT" . ((number "0x2" 11600 . 11603)))
          ("IP_UDP_HDR_SIZE" . ((number "28" 13308 . 13310)))
          ("FCOMM_BASE_PORT" . ((symbol "FCOMM_RX_PORT" 2599 . 2612)))
          ("SEQ_LT" (spp-arg-list ("a" "b") 3065 . 3070) . ((semantic-list "((int16)((a)-(b)) < 0)" 3075 . 3097)))
          ("FCOMM_TIMEOUT_VALUE" . ((number "300000" 4155 . 4161)))
          ("FCOMM_PRIORITY_ACK" . ((number "0" 5676 . 5677)))
          ("VT_HOST_ID" . ((punctuation "-" 5990 . 5991) (number "2" 5991 . 5992)))
          ("FCOMM_FLAG_FUNNELED" . ((number "0x1" 11486 . 11489)))
          ("FCOMM_SRC_PORT" . ((semantic-list "(FCOMM_BASE_PORT-1)" 2649 . 2668)))
          ("SEQ_GEQ" (spp-arg-list ("a" "b") 3208 . 3213) . ((semantic-list "((int16)((a)-(b)) >= 0)" 3217 . 3240)))
          ("FCOMM_FIRST_CHANNEL" . ((number "1" 4565 . 4566)))
          ("FCOMM_PRIORITY_DATA" . ((number "2" 5739 . 5740)))
          ("CH_TYPE_HOST_DOWNLOAD" (spp-arg-list ("chType") 6925 . 6933) . ((semantic-list "(((chType) == eHost2Spu) || ((chType) == eDataBcast))" 6934 . 6987)))
          ("GOT_SAW_ACK_AND_CREDIT" . ((semantic-list "(GOT_SAW_ACK|GOT_SAW_CREDIT)" 11635 . 11663)))
          ("NOTE_QUEUE_TYPE" (spp-arg-list ("pkt" "qtype") 23180 . 23191) . 
              ((IF "if" 23192 . 23194) (semantic-list "((pkt)->pool)" 23195 . 23208) (semantic-list "(pkt)" 23215 . 23220) (punctuation "-" 23220 . 23221) (punctuation ">" 23221 . 23222) (symbol "pool" 23222 . 23226) (punctuation "-" 23226 . 23227) (punctuation ">" 23227 . 23228) (symbol "i_noteQueueType" 23228 . 23243) (semantic-list "((pkt),(qtype))" 23243 . 23258) (punctuation ";" 23258 . 23259)))
          ("MAX_FUNNEL_SIBLINGS" . ((symbol "FCOMM_SLOTS_PER_SPA" 33727 . 33746)))
          ("MAX_BCAST_SEQ_GAP" . ((number "32000" 906 . 911)))
          ("STL_STRING_INCLUDED")
          ("INCR_AGGR_FREESLOT" (spp-arg-list ("ptr") 3470 . 3475) . ((semantic-list "((ptr + 1) % Nz->fComm->i_bcastSAW())" 3476 . 3513)))
          ("BCAST_SEND_WINDOW" . ((number "14" 3575 . 3577)))
          ("FCOMM_CHANNEL_REGEN_NOT_IN_USE" . ((number "2" 4739 . 4740)))
          ("FCOMM_CHANNEL_SPU_RSRCUSG" . ((number "10" 5332 . 5334)))
          ("FCOMM_SLOTS_PER_SPA" . ((number "14" 7235 . 7237)))
          ("GOT_SAW_ACK" . ((number "0x1" 11573 . 11576)))
          ("MAX_ACK_AGGR_ARR_SIZE" . ((number "16" 3707 . 3709)))
          ("PACK_WITH_DIAB")
          ("MAX_FUNNELED_BYTES" . ((semantic-list "(5*1024*1024)" 5846 . 5859)))
          ("NODE_LOCK2" (spp-arg-list ("x" "msr") 10653 . 10660) . 
              ((IF "if" 10665 . 10667) (semantic-list "(m_enableSPAScheme && m_pNodeArr[(x)]->spuDist)" 10668 . 10715) (symbol "COMM_LOCK2" 10722 . 10732) (semantic-list "(m_spaArr[m_pNodeArr[(x)]->spaIdx].spaLock,msr)" 10732 . 10779) (punctuation ";" 10779 . 10780) (symbol "COMM_LOCK2" 10783 . 10793) (semantic-list "(m_pNodeArr[(x)]->nodeLock,msr)" 10793 . 10824)))
          ("CHANNEL_LOCK" (spp-arg-list ("x" "msr") 11149 . 11156) . ((symbol "COMM_LOCK" 11159 . 11168) (semantic-list "((x)->channelLock,msr)" 11168 . 11190)))
          ("APP_PAYLOAD_SIZE" (spp-arg-list ("pFrame") 16885 . 16893) . ((semantic-list "((pFrame)->frameLen-sizeof(TFCommFrame))" 16894 . 16934)))
          ("CHANNEL_IDX_MASK" . ((number "0x1FF" 638 . 643)))
          ("NETINET_IN_INCLUDED")
          ("STL_VECTOR_INCLUDED")
          ("FCOMM_BCAST_PORT" . ((semantic-list "(FCOMM_BASE_PORT+1)" 2796 . 2815)))
          ("PACK_WITH_GCC" . ((symbol "__attribute__" 3985 . 3998) (semantic-list "((packed))" 3999 . 4009)))
          ("CH_IDX_TRANSIENT" (spp-arg-list ("chIdx") 7135 . 7142) . ((semantic-list "((chIdx & CHANNEL_IDX_MASK) >=  FCOMM_CHANNEL_TRANSIENT_FIRST)" 7143 . 7205)))
          ("CHANNEL_LOCK2" (spp-arg-list ("x" "msr") 11212 . 11219) . ((symbol "COMM_LOCK2" 11221 . 11231) (semantic-list "((x)->channelLock,msr)" 11231 . 11253)))
          ("FCOMM_APP_RCVD" . ((number "0x4" 11545 . 11548)))
          ("MAX_BCAST_SIBLINGS" . ((number "16" 33592 . 33594)))
          ("MAX_RCV_AVAIL_WND" . ((number "0xFFFF" 33869 . 33875)))
          ("MAX_POOLS_PER_CHANNEL" . ((number "4" 37731 . 37732)))
          ("DEBUG_TT25551" . ((number "0" 143 . 144)))
          ("FCOMM_SPU_PORT" . ((semantic-list "(FCOMM_BASE_PORT+2)" 2873 . 2892)))
          ("SEQ_DIFF" (spp-arg-list ("a" "b") 3258 . 3263) . ((semantic-list "((uint16)((a)-(b)))" 3266 . 3285)))
          ("FCOMM_CHANNEL_RSP_AGGR" . ((number "9" 5296 . 5297)))
          ("CH_TYPE_SPU_TRANSIENT" (spp-arg-list ("chType") 7017 . 7025) . ((semantic-list "( ((chType) == eSpu2Spu) || ((chType) == eSpu2Host) || ((chType) == eMiniSpu2Host))" 7026 . 7109)))
          ("LINUX_NODE_LOCK" (spp-arg-list ("x") 11044 . 11047) . ((symbol "NODE_LOCK" 11050 . 11059) (semantic-list "((x),__dummy)" 11059 . 11072)))
          ("FCOMM_FLAG_SAWREQ" . ((number "0x2" 11518 . 11521)))
          ("GET_QUEUE_TYPE" (spp-arg-list ("pkt") 23283 . 23288) . ((semantic-list "( (pkt)->pool->i_getQueueType((pkt)))" 23289 . 23326)))
          ("CHANNEL_MASK_SUBCHANNEL" (spp-arg-list ("x") 850 . 853) . ((semantic-list "((x) & CHANNEL_IDX_MASK)" 854 . 878)))
          ("STDLIB_INCLUDED")
          ("SEQ_LEQ" (spp-arg-list ("a" "b") 3113 . 3118) . ((semantic-list "((int16)((a)-(b)) <= 0)" 3122 . 3145)))
          ("FCOMM_CHANNEL_SPUDIST_CTRL" . ((number "7" 5109 . 5110)))
          ("VT_FUNNEL_ID" . ((punctuation "-" 5918 . 5919) (number "100" 5919 . 5922)))
          ("VT_BCAST_ID" . ((punctuation "-" 6055 . 6056) (number "1" 6056 . 6057)))
          ("NODE_LOCK" (spp-arg-list ("x" "msr") 10464 . 10471) . 
              ((IF "if" 10476 . 10478) (semantic-list "(m_enableSPAScheme && m_pNodeArr[(x)]->spuDist)" 10479 . 10526) (symbol "COMM_LOCK" 10533 . 10542) (semantic-list "(m_spaArr[m_pNodeArr[(x)]->spaIdx].spaLock,msr)" 10542 . 10589) (punctuation ";" 10589 . 10590) (symbol "COMM_LOCK" 10593 . 10602) (semantic-list "(m_pNodeArr[(x)]->nodeLock,msr)" 10602 . 10633)))
          )
))
  :file "!home!workspaces!dbarrett!int-marlin-1!main!src!nde!comm!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
